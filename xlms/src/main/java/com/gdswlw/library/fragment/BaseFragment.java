package com.gdswlw.library.fragment;import android.app.Activity;import android.content.Context;import android.content.Intent;import android.content.res.Resources.NotFoundException;import android.os.Bundle;import android.support.annotation.ColorRes;import android.support.annotation.DrawableRes;import android.support.annotation.IdRes;import android.support.annotation.LayoutRes;import android.support.annotation.NonNull;import android.support.annotation.StringRes;import android.support.v4.app.Fragment;import android.support.v4.app.FragmentActivity;import android.text.Html;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.view.Window;import android.view.WindowManager;import android.widget.Button;import android.widget.CompoundButton;import android.widget.EditText;import android.widget.ImageView;import android.widget.TextView;import com.gdswlw.library.toolkit.UIKit;/** * Fragment基类 *  * @author shi */public abstract class BaseFragment extends Fragment {	protected String TAG;	public Context context;	public FragmentActivity activity;	public View rootView;	protected LayoutInflater inflater;	public static final String EXTRA_CONTAINER_ID = "extra_container_id";		public abstract int setContentView();	public abstract void initUI();	public abstract void regUIEvent();	public void onCreateBefore(){}	@Override	public View onCreateView(LayoutInflater inflater, ViewGroup container,			Bundle savedInstanceState) {		this.inflater = inflater;		isPrepared = true;		return  inflater.inflate(setContentView(), container, false);	}	/**	 * push a fragment to view by containerViewId	 * @param containerViewId	 * @param fragment	 */	protected void pushFragment(@IdRes  int containerViewId, Fragment fragment){		getFragmentManager().beginTransaction().add(containerViewId,fragment).commit();	}	/**	 * push a fragment to view by default containerViewId	 * @param fragment	 */	protected void pushFragment(BaseFragment fragment){		if(getArguments().getInt(EXTRA_CONTAINER_ID,0) > 0){			pushFragment(getArguments().getInt(EXTRA_CONTAINER_ID),fragment);		}	}	@Override	public void onActivityCreated(Bundle savedInstanceState) {		// TODO Auto-generated method stub		super.onActivityCreated(savedInstanceState);		context = getActivity().getApplicationContext();		activity = getActivity();		rootView = getView();		TAG = getClass().getSimpleName();		if(getArguments() == null || ! getArguments().getBoolean("viewpager",false)){			loadThings(false);		}	}	protected boolean isLoad;	protected boolean isPrepared;	@Override	public void setUserVisibleHint(boolean isVisibleToUser) {		super.setUserVisibleHint(isVisibleToUser);		if(getUserVisibleHint()) {			loadThings(getUserVisibleHint());		}	}	private void loadThings(boolean isViewPager){		if (isViewPager && (!isPrepared || isLoad) ) {			return;		}		onCreateBefore();		initUI();		regUIEvent();		isLoad = true;	}	protected View currentView;	public final BaseFragment id(@NonNull View view){		currentView = view;		return this;	}	public final BaseFragment id(@IdRes int id){		return id(viewId(id));	}	public final BaseFragment tag(Object tag){		if(currentView != null){			currentView.setTag(tag);		}		return this;	}	public final BaseFragment tag(@IdRes int id, Object tag){		if(currentView != null){			currentView.setTag(id,tag);		}		return this;	}	public final Object tag(){		if(currentView != null){			return currentView.getTag();		}		return null;	}	public final Object tag(@IdRes int id){		if(currentView != null){			return currentView.getTag(id);		}		return null;	}	public final boolean check(){		if(currentView != null && currentView instanceof CompoundButton){			return ((CompoundButton)currentView).isChecked();		}		return false;	}	public final void check(boolean isChecked){		if(currentView != null && currentView instanceof CompoundButton){			 ((CompoundButton)currentView).setChecked(isChecked);		}	}	@SuppressWarnings("unchecked")	/**	 * @param fragmentId	 * @return Fragment	 */	public <T extends Fragment> T fragmentId(@IdRes  int fragmentId) {		return (T) getChildFragmentManager().findFragmentById(fragmentId);	}	public <T extends Fragment> T fragmentTag(@NonNull  String tag) {		return (T) getFragmentManager().findFragmentByTag(tag);	}	public final BaseFragment text(@NonNull String text){		if(currentView != null){			if(currentView instanceof TextView){				((TextView)currentView).setText(text);			}		}		return this;	}	public final BaseFragment textHTML(@NonNull String text){		if(currentView != null){			if(currentView instanceof TextView){				((TextView)currentView).setText(Html.fromHtml(text));			}		}		return this;	}	public final BaseFragment alpha(float alpha){		if(currentView != null){			currentView.setAlpha(alpha);		}		return this;	}	public final BaseFragment click(@NonNull View.OnClickListener onClickListener){		if(currentView != null){			currentView.setOnClickListener(onClickListener);		}		return this;	}	public final BaseFragment text(@StringRes int strRes){		return text(string(strRes));	}	public final BaseFragment textColor(@ColorRes int colorId){		if(currentView != null){			if(currentView instanceof TextView){				((TextView)currentView).setTextColor(color(colorId));			}else if(currentView instanceof Button){				((Button)currentView).setTextColor(color(colorId));			}		}		return this;	}	public final BaseFragment image(@DrawableRes int drawable){		if(currentView != null){			if(currentView instanceof ImageView){				((ImageView)currentView).setImageResource(drawable);			}		}		return this;	}	/**	 * make the view gone	 *	 * @return	 */	public final BaseFragment gone(){		if(currentView != null){			currentView.setVisibility(View.GONE);		}		return this;	}	/**	 * make the view visible	 *	 * @return	 */	public final BaseFragment visible(){		if(currentView != null){			currentView.setVisibility(View.VISIBLE);		}		return this;	}	/**	 * make the view invisible	 *	 * @return	 */	public final BaseFragment invisible(){		if(currentView != null){			currentView.setVisibility(View.INVISIBLE);		}		return this;	}	/**	 * push a activity to activity stack	 * @param activity	 */	public void push(Class<? extends Activity> activity){		push(activity,"");	}	/**	 *  push a activity to activity stack	 * @param activity	 * @param title for titleBar title	 */	public void push(Class<? extends Activity> activity,String title){		push(new Intent(context,activity),title);	}	/**	 * push a activity to activity stack	 *	 * @param intent	 * @param title	 */	public void push(Intent intent,String title){		startActivity(intent.putExtra(Intent.EXTRA_TITLE,title));	}	/**	 * start activity for get data	 *	 * @param intent	 * @param title	 * @param requestCode	 */	protected void getResult(Intent intent,String title,int requestCode){		startActivityForResult(intent.putExtra(Intent.EXTRA_TITLE,title),requestCode);	}	/**	 * start activity for get data	 *	 * @param intent	 * @param requestCode	 */	protected void getResult(Intent intent,int requestCode){		getResult(intent,"",requestCode);	}	/**	 * build a intent	 * @param activity	 * @return	 */	protected Intent buildIntent(Class<? extends Activity> activity){		return new Intent(context,activity);	}	@Override	public void onDestroyView() {		super.onDestroyView();		currentView = null;	}	/**	 * Print the error log	 */	public void eLogs(@NonNull String message) {		UIKit.eLog(TAG,message);	}	/**	 * Print log information	 */	public void iLogs(@NonNull  String message) {		UIKit.iLog(TAG,message);	}	/**	 * Print the warming log	 * @param message	 */	public void wLogs(@NonNull String message) {		UIKit.wLog(TAG,message);	}	/**	 * Print the debug log	 * @param message	 */	public void dLogs(@NonNull String message) {		UIKit.dLog(TAG,message);	}	/**	 * Get string value from the resources	 *	 * @param stringId	 *	 * @return string	 */	public String string(@StringRes int stringId) {		String str = "";		try {			str = getResources().getString(stringId);		} catch (NotFoundException e) {			// TODO Auto-generated catch block			e.printStackTrace();			str = "";		}		return str;	}	/**	 * Get color value from the resources	 * @param colorId	 * @return color	 */	public int color(@ColorRes int colorId) {		int color = -1;		try {			color = getResources().getColor(colorId);		} catch (NotFoundException e) {			// TODO Auto-generated catch block			e.printStackTrace();			color = -1;		}		return color;	}	protected  void toastShort(@NonNull String s){		UIKit.toastShort(s);	}	protected void finish(){		getActivity().finish();	}	protected void toastLong(@NonNull String s){		UIKit.toastLong(s);	}	/**	 * get EditText string content	 * @param e	 * @return	 */	public String etString(@NonNull  EditText e) {		return  (e == null ? "" : e.getText().toString().trim());	}	/**	 * Get the system service.	 * @param systemServiceName	 * @return	 */	public Object service(@NonNull  String systemServiceName) {		return context.getSystemService(systemServiceName);	}	@SuppressWarnings("unchecked")	/**	 * @param viewId	 * @return	 */	public <T extends View> T viewId(@IdRes int viewId) {		return (T) rootView.findViewById(viewId);	}	/**	 * fullScreen	 */	protected  void  fullScreen(){		activity.getWindow().setFlags(WindowManager.LayoutParams.MATCH_PARENT, WindowManager.LayoutParams.MATCH_PARENT);	}	/**	 * noTitle	 */	protected  void  noTitle(){		activity.requestWindowFeature(Window.FEATURE_NO_TITLE);	}	/**	 * include the layout as view	 * @param layoutId	 * @return view	 */	protected  View include(@LayoutRes int layoutId){		return include(layoutId,null);	}	/**	 * include the layout as view	 * @param layoutId	 * @param root	 * @return view	 */	protected  View include(@LayoutRes int layoutId,@NonNull  ViewGroup root){		return include(layoutId, root,false);	}	/**	 * include the layout as view	 * @param layoutId	 * @param root	 * @param isAddRoot	 * @return view	 */	protected  View include(@LayoutRes int layoutId,@NonNull  ViewGroup root,boolean isAddRoot){		return this.inflater.inflate(layoutId, root,isAddRoot);	}	public String getEditText(@IdRes int id){		View view = viewId(id);		if(view != null && view instanceof EditText){			return getEditText(((EditText)view));		}		return "";	}	public String getEditText(EditText editText){		if(editText != null){			return editText.getText().toString().trim();		}		return "";	}}