package com.gdswlw.library.activity;import android.app.Activity;import android.app.ProgressDialog;import android.content.ActivityNotFoundException;import android.content.Context;import android.content.DialogInterface;import android.content.Intent;import android.content.res.Resources.NotFoundException;import android.graphics.drawable.Drawable;import android.os.Bundle;import android.support.annotation.ColorRes;import android.support.annotation.DrawableRes;import android.support.annotation.IdRes;import android.support.annotation.LayoutRes;import android.support.annotation.NonNull;import android.support.annotation.StringRes;import android.support.v4.app.Fragment;import android.support.v4.content.ContextCompat;import android.support.v7.app.AppCompatActivity;import android.view.Gravity;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.view.Window;import android.view.WindowManager;import android.view.inputmethod.InputMethodManager;import android.widget.Button;import android.widget.CompoundButton;import android.widget.EditText;import android.widget.ImageView;import android.widget.TextView;import com.gdswlw.library.toolkit.PreferenceHelper;import com.gdswlw.library.toolkit.UIKit;/** * @ClassName: GDSBaseActivity * @Description: Activity base * @author shihuanzhang 2335946896@qq_com */public abstract class GDSBaseActivity extends AppCompatActivity {	public BaseHandler handler;	protected String TAG;	protected ProgressDialog pd;	public Context context;	protected View currentView;	public final GDSBaseActivity id(@NonNull View view){		currentView = view;		return this;	}	public final GDSBaseActivity id(@IdRes int id){		return id(findViewById(id));	}	public final GDSBaseActivity text(@NonNull String text){		if(currentView != null){			if(currentView instanceof TextView){				((TextView)currentView).setText(text);			}		}		return this;	}	public final GDSBaseActivity alpha(float alpha){		if(currentView != null){			currentView.setAlpha(alpha);		}		return this;	}	public final GDSBaseActivity enable(boolean isEnable){		if(currentView != null){			currentView.setEnabled(isEnable);		}		return this;	}	public final GDSBaseActivity click(@NonNull View.OnClickListener onClickListener){		if(currentView != null){			currentView.setOnClickListener(onClickListener);		}		return this;	}	/**	 * get text content with view	 * @return	 */	public final String text(){		if(currentView != null){			if(currentView instanceof TextView){				return ((TextView)currentView).getText().toString();			}else if(currentView instanceof EditText){				return ((EditText)currentView).getText().toString().trim();			}		}		return "";	}	/**	 * set text for view	 * @param strRes	 * @return	 */	public final GDSBaseActivity text(@StringRes int strRes){		return text(string(strRes));	}	public final GDSBaseActivity textColor(@ColorRes int colorId){		if(currentView != null){			if(currentView instanceof TextView){				((TextView)currentView).setTextColor(color(colorId));			}else if(currentView instanceof Button){				((Button)currentView).setTextColor(color(colorId));			}		}		return this;	}	/**	 * set the image by drawale id	 * @param drawable	 * @return	 */	public final GDSBaseActivity image(@DrawableRes int drawable){		if(currentView != null){			if(currentView instanceof ImageView){				((ImageView)currentView).setImageResource(drawable);			}		}		return this;	}	/**	 * set visibility is gone for view	 * @return	 */	public final GDSBaseActivity gone(){		if(currentView != null){			currentView.setVisibility(View.GONE);		}		return this;	}	/**	 * set visibility is visible for view	 * @return	 */	public final GDSBaseActivity visible(){		if(currentView != null){			currentView.setVisibility(View.VISIBLE);		}		return this;	}	/**	 * set visibility is invisible for view	 * @return	 */	public final GDSBaseActivity invisible(){		if(currentView != null){			currentView.setVisibility(View.INVISIBLE);		}		return this;	}	public final GDSBaseActivity tag(Object tag){		if(currentView != null){			currentView.setTag(tag);		}		return this;	}	public final GDSBaseActivity tag(@IdRes int id, Object tag){		if(currentView != null){			currentView.setTag(id,tag);		}		return this;	}	public final Object tag(){		if(currentView != null){			return currentView.getTag();		}		return null;	}	public final Object tag(@IdRes int id){		if(currentView != null){			return currentView.getTag(id);		}		return null;	}	public final boolean check(){		if(currentView != null && currentView instanceof CompoundButton){			return ((CompoundButton)currentView).isChecked();		}		return false;	}	public final GDSBaseActivity check(boolean isChecked){		if(currentView != null && currentView instanceof CompoundButton){			((CompoundButton)currentView).setChecked(isChecked);		}		return this;	}	public String getEditText(@IdRes int id){		View view = viewId(id);		if(view != null && view instanceof EditText){			return getEditText(((EditText)view));		}		return "";	}	public String getEditText(EditText editText){		if(editText != null){			return editText.getText().toString().trim();		}		return "";	}	/**	 * push a activity to activity stack	 * @param activity	 */	public void push(Class<? extends Activity> activity){		push(activity,"");	}	/**	 *  push a activity to activity stack	 * @param activity	 * @param title for titleBar title	 */	public void push(Class<? extends Activity> activity,String title){		startActivity(new Intent(context,activity).putExtra(Intent.EXTRA_TITLE,title));	}	public void push(Intent intent,String title){		startActivity(intent.putExtra(Intent.EXTRA_TITLE,title));	}	public void push(Class<? extends Activity> activity,boolean isFinish){		push(activity,"");		if(isFinish){			finish();		}	}	@Override	protected void onDestroy() {		super.onDestroy();		currentView = null;	}	/**	 * Subclasses can override this method, create your own ProgressDialog object	 * By default the default system ProgressDialog	 */	protected void createProgressDialog() {		if (pd == null) {			pd = new ProgressDialog(this);			pd.setCanceledOnTouchOutside(false);			pd.getWindow().setGravity(Gravity.CENTER);			pd.setOnCancelListener(new DialogInterface.OnCancelListener() {				@Override				public void onCancel(DialogInterface dialogInterface) {					onPdCancel();				}			});		}	}	/**	 * Subclass implementation changes, when the ProgressDialog is canceled by the user.	 */	protected void onPdCancel(){	}	/**	 * showProgressDialog	 * @param message	 * @param isCancelable     */	public void showProgressDialog(String message, boolean isCancelable) {		createProgressDialog();		pd.setCancelable(isCancelable);		pd.setMessage(message);		pd.show();	}	/**	 * showProgressDialog	 */	public void dismissProgressDialog() {		if (pd != null && pd.isShowing()) {			pd.dismiss();		}	}	/**	 * getProgessDialog	 * @param message	 * @param isCancel     * @return     */	public ProgressDialog getProgessDialog(String message, boolean isCancel) {		createProgressDialog();		pd.setCancelable(isCancel);		pd.setMessage(message);		return pd;	}	/**	 * Get intent by Activity class	 * @param c	 * @return     */	public Intent intent(Class<? extends Activity> c) {		return new Intent(getApplicationContext(), c);	}	/**	 * startActivity	 * @param cls     */	public void activity(Class<? extends Activity> cls) {		activity(intent(cls));	}	/**	 * startActivity	 * @param intent	 */	public void activity(Intent intent) {		try {			startActivity(intent);		} catch (ActivityNotFoundException e) {			// TODO Auto-generated catch block			eLogs(intent.getClass().getName() + " Not Found!");		}	}	/**	 * Start activity and finish current activity.	 * @param cls	 */	public void activityFinish(Class<? extends Activity> cls) {		activityFinish(intent(cls));	}	/**	 * Start activity and finish current activity.	 * @param intent	 */	public void activityFinish(Intent intent) {		activity(intent);		finish();	}	/**	 * start activity by a  request code	 * @param cls	 * @param requestCode     */	public void activity(Class<? extends Activity> cls,int requestCode) {		try {			startActivityForResult(intent(cls),requestCode);		} catch (ActivityNotFoundException e) {			// TODO Auto-generated catch block			eLogs(cls.getName() + " Not Found!");		}	}	/**	 * init UI	 */	public abstract void initUI();	/**	 * register event for views	 */	public abstract void regUIEvent();	/**	 *  provide a layout file id	 */	@LayoutRes	public abstract int getLayout();	/**	 * If have other parameters need to be initialized in onCreate, then rewrite the method.	 */	public void onCreateBefore(Bundle savedInstanceState) {	}	/**	 * If there is a logical judgment before the Activity is created, then rewrite the method	 * @return Whether the Activity is allowed to be initialized	 */	protected boolean isNeedInit(){		return  true;	}	@Override	protected void onCreate(Bundle savedInstanceState) {		// TODO Auto-generated method stub		super.onCreate(savedInstanceState);		if(!isNeedInit()){			finish();		}		supportRequestWindowFeature(Window.FEATURE_NO_TITLE);		onCreateBefore(savedInstanceState);		TAG = getClass().getName();		context = getApplicationContext();		if (getLayout() != 0) {			setContentView(getLayout());		}		initUI();		regUIEvent();	}	/**	 * Create handler	 * @param methodName,eg: public void methodName(Message.class)	 *	 */	public void handler(@NonNull  String methodName) {		if (handler == null) {			handler = new BaseHandler(this, methodName);		}	}	/**	 *  To enable the default handler	 */	public void handler() {		if (handler == null) {			handler = new BaseHandler(this, "updateUI");		}	}	/**	 * Print the error log	 */	public void eLogs(@NonNull  String message) {		UIKit.eLog(TAG,message);	}	/**	 * Print log information	 */	public void iLogs(@NonNull  String message) {		UIKit.iLog(TAG,message);	}	/**	 * Print the warming log	 * @param message     */	public void wLogs(@NonNull String message) {		UIKit.wLog(TAG,message);	}	/**	 * Print the debug log	 * @param message     */	public void dLogs(@NonNull String message) {		UIKit.dLog(TAG,message);	}	/**	 * Get string value from the resources	 *	 * @param stringId	 *	 * @return string	 */	public String string(@StringRes int stringId) {		String str = "";		try {			str = getResources().getString(stringId);		} catch (NotFoundException e) {			// TODO Auto-generated catch block			e.printStackTrace();			str = "";		}		return str;	}	/**	 * Get color value from the resources	 * @param colorId	 * @return color	 */	public int color(@ColorRes  int colorId) {		int color = -1;		try {			color = ContextCompat.getColor(this, colorId);		} catch (NotFoundException e) {			// TODO Auto-generated catch block			e.printStackTrace();			color = -1;		}		return color;	}	/**	 * Get drawable  from the resources	 * @param drawableId	 * @return	 */	public Drawable drawable(@ColorRes  int drawableId) {		Drawable drawable = null;		try {			drawable = ContextCompat.getDrawable(this, drawableId);		} catch (NotFoundException e) {			// TODO Auto-generated catch block			e.printStackTrace();		}		return drawable;	}	/**	 * show short toast	 * @param s	 */	protected  void toastShort(@NonNull String s){		UIKit.toastShort(s);	}	/**	 * show long toast	 * @param s	 */	protected void toastLong(@NonNull String s){		UIKit.toastLong(s);	}	/**	 * Get the system service.	 * @param systemServiceName	 * @return     */	public Object service(@NonNull  String systemServiceName) {		return context.getSystemService(systemServiceName);	}	@SuppressWarnings("unchecked")	/**	 * @param viewId	 * @return View	 */	public <T extends View> T viewId(@IdRes  int viewId) {		return (T) findViewById(viewId);	}	@SuppressWarnings("unchecked")	/**	 * @param viewId	 * @return View	 */	public <T extends View> T viewId(@IdRes  int viewId,@NonNull View parent) {		return (T) parent.findViewById(viewId);	}	@SuppressWarnings("unchecked")	/**	 * @param fragmentId	 * @return Fragment	 */	public <T extends Fragment> T fragmentId(@IdRes  int fragmentId) {		return (T) getSupportFragmentManager().findFragmentById(fragmentId);	}	@SuppressWarnings("unchecked")	/**	 * @param tag	 * @return Fragment	 */	public <T extends Fragment> T fragmentId(@NonNull String tag) {		return (T) getSupportFragmentManager().findFragmentByTag(tag);	}	/**	 * set window fullScreen	 */	protected  void  fullScreen(){		getWindow().setFlags(WindowManager.LayoutParams.MATCH_PARENT, WindowManager.LayoutParams.MATCH_PARENT);	}	/**	 * set window no title	 */	protected  void  noTitle(){		requestWindowFeature(Window.FEATURE_NO_TITLE);	}	/**	 * include the layout as view	 * @param layoutId	 * @return view     */	protected  View include(@LayoutRes  int layoutId){		return include(layoutId,null,false);	}	/**	 * include the layout as view	 * @param layoutId	 * @param root	 * @param isAddRoot	 * @return view	 */	protected  View include(@LayoutRes int layoutId,@NonNull  ViewGroup root,boolean isAddRoot){		return LayoutInflater.from(this).inflate(layoutId, root,isAddRoot);	}	/**	 * include the layout as view	 * @param layoutId	 * @param root	 * @return view	 */	protected  View include(@LayoutRes int layoutId,@NonNull  ViewGroup root){		return include(layoutId, root,false);	}	/**	 * pop the fragment for fragment backStack	 */	public void popFragment(){		if (getSupportFragmentManager().getBackStackEntryCount() > 0){			getSupportFragmentManager().popBackStack();		}else {			finish();		}	}	/**	 * Hides the soft keyboard	 */	public void hideSoftKeyboard() {		if(getCurrentFocus()!=null) {			InputMethodManager inputMethodManager = (InputMethodManager) getSystemService(INPUT_METHOD_SERVICE);			inputMethodManager.hideSoftInputFromWindow(getCurrentFocus().getWindowToken(), 0);		}	}	/**	 * Shows the soft keyboard	 */	public void showSoftKeyboard(View view) {		InputMethodManager inputMethodManager = (InputMethodManager) getSystemService(INPUT_METHOD_SERVICE);		view.requestFocus();		inputMethodManager.showSoftInput(view, 0);	}	protected PreferenceHelper getConfig(){		return null;	}	/**	 * start activity for get data	 *	 * @param intent	 * @param title	 * @param requestCode	 */	protected void getResult(Intent intent,String title,int requestCode){		startActivityForResult(intent.putExtra(Intent.EXTRA_TITLE,title),requestCode);	}}